diff -uNr linux-3.18.11-raw/drivers/net/ethernet/broadcom/tg3.c linux-3.18.11/drivers/net/ethernet/broadcom/tg3.c
--- linux-3.18.11-raw/drivers/net/ethernet/broadcom/tg3.c	2015-04-04 10:46:37.000000000 +0800
+++ linux-3.18.11/drivers/net/ethernet/broadcom/tg3.c	2015-06-24 02:25:10.000000000 +0800
@@ -6916,6 +6916,8 @@
 			skb_checksum_none_assert(skb);
 
 		skb->protocol = eth_type_trans(skb, tp->dev);
+		/* Set skb timestamp */
+	        skb->tstamp=ktime_get_real();
 
 		if (len > (tp->dev->mtu + ETH_HLEN) &&
 		    skb->protocol != htons(ETH_P_8021Q) &&
diff -uNr linux-3.18.11-raw/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c linux-3.18.11/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
--- linux-3.18.11-raw/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c	2015-04-04 10:46:37.000000000 +0800
+++ linux-3.18.11/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c	2015-06-24 02:27:41.000000000 +0800
@@ -2036,6 +2036,9 @@
 		/* populate checksum, timestamp, VLAN, and protocol */
 		ixgbe_process_skb_fields(rx_ring, rx_desc, skb);
 
+		/* Set skb timestamp */
+        	skb->tstamp=ktime_get_real();
+
 #ifdef IXGBE_FCOE
 		/* if ddp, not passing to ULD unless for FCP_RSP or error */
 		if (ixgbe_rx_is_fcoe(rx_ring, rx_desc)) {
diff -uNr linux-3.18.11-raw/include/net/tcp.h linux-3.18.11/include/net/tcp.h
--- linux-3.18.11-raw/include/net/tcp.h	2015-04-04 10:46:37.000000000 +0800
+++ linux-3.18.11/include/net/tcp.h	2015-06-24 02:21:32.000000000 +0800
@@ -281,6 +281,11 @@
 extern struct percpu_counter tcp_sockets_allocated;
 extern int tcp_memory_pressure;
 
+/* Added by Wei Bai */
+extern int sysctl_tcp_rto_min;
+extern int sysctl_tcp_delack_min;
+extern int sysctl_tcp_delayed_ack;
+
 /*
  * The next routines deal with comparing 32 bit unsigned ints
  * and worry about wraparound (automatic with unsigned arithmetic).
@@ -627,7 +632,9 @@
 static inline u32 tcp_rto_min(struct sock *sk)
 {
 	const struct dst_entry *dst = __sk_dst_get(sk);
-	u32 rto_min = TCP_RTO_MIN;
+	/* Modified by Wei Bai */
+	u32 rto_min = sysctl_tcp_rto_min;
+	//u32 rto_min = TCP_RTO_MIN;
 
 	if (dst && dst_metric_locked(dst, RTAX_RTO_MIN))
 		rto_min = dst_metric_rtt(dst, RTAX_RTO_MIN);
diff -uNr linux-3.18.11-raw/include/uapi/linux/sysctl.h linux-3.18.11/include/uapi/linux/sysctl.h
--- linux-3.18.11-raw/include/uapi/linux/sysctl.h	2015-04-04 10:46:37.000000000 +0800
+++ linux-3.18.11/include/uapi/linux/sysctl.h	2015-06-24 02:21:32.000000000 +0800
@@ -425,6 +425,9 @@
 	NET_TCP_ALLOWED_CONG_CONTROL=123,
 	NET_TCP_MAX_SSTHRESH=124,
 	NET_TCP_FRTO_RESPONSE=125,
+	NET_TCP_RTO_MIN=126,
+	NET_TCP_DELACK_MIN=127,
+	NET_TCP_DELAYED_ACK=128,
 };
 
 enum {
diff -uNr linux-3.18.11-raw/kernel/sysctl_binary.c linux-3.18.11/kernel/sysctl_binary.c
--- linux-3.18.11-raw/kernel/sysctl_binary.c	2015-04-04 10:46:37.000000000 +0800
+++ linux-3.18.11/kernel/sysctl_binary.c	2015-06-24 02:21:32.000000000 +0800
@@ -373,6 +373,9 @@
 	{ CTL_INT,	NET_TCP_FACK,				"tcp_fack" },
 	{ CTL_INT,	NET_TCP_REORDERING,			"tcp_reordering" },
 	{ CTL_INT,	NET_TCP_ECN,				"tcp_ecn" },
+	{ CTL_INT,	NET_TCP_RTO_MIN,			"tcp_rto_min" },
+	{ CTL_INT,	NET_TCP_DELACK_MIN,			"tcp_delack_min" },
+	{ CTL_INT,	NET_TCP_DELAYED_ACK,			"tcp_delayed_ack" },
 	{ CTL_INT,	NET_TCP_DSACK,				"tcp_dsack" },
 	{ CTL_INT,	NET_TCP_MEM,				"tcp_mem" },
 	{ CTL_INT,	NET_TCP_WMEM,				"tcp_wmem" },
diff -uNr linux-3.18.11-raw/kernel.patch linux-3.18.11/kernel.patch
--- linux-3.18.11-raw/kernel.patch	1970-01-01 08:00:00.000000000 +0800
+++ linux-3.18.11/kernel.patch	2015-06-24 02:20:36.000000000 +0800
@@ -0,0 +1,193 @@
+diff -uNr linux-3.18.11/include/net/tcp.h linux-3.18.11-patch/include/net/tcp.h
+--- linux-3.18.11/include/net/tcp.h	2015-04-04 10:46:37.000000000 +0800
++++ linux-3.18.11-patch/include/net/tcp.h	2015-04-16 13:36:26.000000000 +0800
+@@ -281,6 +281,11 @@
+ extern struct percpu_counter tcp_sockets_allocated;
+ extern int tcp_memory_pressure;
+ 
++/* Added by Wei Bai */
++extern int sysctl_tcp_rto_min;
++extern int sysctl_tcp_delack_min;
++extern int sysctl_tcp_delayed_ack;
++
+ /*
+  * The next routines deal with comparing 32 bit unsigned ints
+  * and worry about wraparound (automatic with unsigned arithmetic).
+@@ -627,7 +632,9 @@
+ static inline u32 tcp_rto_min(struct sock *sk)
+ {
+ 	const struct dst_entry *dst = __sk_dst_get(sk);
+-	u32 rto_min = TCP_RTO_MIN;
++	/* Modified by Wei Bai */
++	u32 rto_min = sysctl_tcp_rto_min;
++	//u32 rto_min = TCP_RTO_MIN;
+ 
+ 	if (dst && dst_metric_locked(dst, RTAX_RTO_MIN))
+ 		rto_min = dst_metric_rtt(dst, RTAX_RTO_MIN);
+diff -uNr linux-3.18.11/include/uapi/linux/sysctl.h linux-3.18.11-patch/include/uapi/linux/sysctl.h
+--- linux-3.18.11/include/uapi/linux/sysctl.h	2015-04-04 10:46:37.000000000 +0800
++++ linux-3.18.11-patch/include/uapi/linux/sysctl.h	2015-04-16 13:28:22.000000000 +0800
+@@ -425,6 +425,9 @@
+ 	NET_TCP_ALLOWED_CONG_CONTROL=123,
+ 	NET_TCP_MAX_SSTHRESH=124,
+ 	NET_TCP_FRTO_RESPONSE=125,
++	NET_TCP_RTO_MIN=126,
++	NET_TCP_DELACK_MIN=127,
++	NET_TCP_DELAYED_ACK=128,
+ };
+ 
+ enum {
+diff -uNr linux-3.18.11/kernel/sysctl_binary.c linux-3.18.11-patch/kernel/sysctl_binary.c
+--- linux-3.18.11/kernel/sysctl_binary.c	2015-04-04 10:46:37.000000000 +0800
++++ linux-3.18.11-patch/kernel/sysctl_binary.c	2015-04-16 13:39:37.000000000 +0800
+@@ -373,6 +373,9 @@
+ 	{ CTL_INT,	NET_TCP_FACK,				"tcp_fack" },
+ 	{ CTL_INT,	NET_TCP_REORDERING,			"tcp_reordering" },
+ 	{ CTL_INT,	NET_TCP_ECN,				"tcp_ecn" },
++	{ CTL_INT,	NET_TCP_RTO_MIN,			"tcp_rto_min" },
++	{ CTL_INT,	NET_TCP_DELACK_MIN,			"tcp_delack_min" },
++	{ CTL_INT,	NET_TCP_DELAYED_ACK,			"tcp_delayed_ack" },
+ 	{ CTL_INT,	NET_TCP_DSACK,				"tcp_dsack" },
+ 	{ CTL_INT,	NET_TCP_MEM,				"tcp_mem" },
+ 	{ CTL_INT,	NET_TCP_WMEM,				"tcp_wmem" },
+diff -uNr linux-3.18.11/net/dccp/timer.c linux-3.18.11-patch/net/dccp/timer.c
+--- linux-3.18.11/net/dccp/timer.c	2015-04-04 10:46:37.000000000 +0800
++++ linux-3.18.11-patch/net/dccp/timer.c	2015-04-16 14:09:31.000000000 +0800
+@@ -203,7 +203,7 @@
+ 		icsk->icsk_ack.blocked = 1;
+ 		NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_DELAYEDACKLOCKED);
+ 		sk_reset_timer(sk, &icsk->icsk_delack_timer,
+-			       jiffies + TCP_DELACK_MIN);
++			       jiffies + sysctl_tcp_delack_min);//TCP_DELACK_MIN);
+ 		goto out;
+ 	}
+ 
+diff -uNr linux-3.18.11/net/ipv4/ip_output.c linux-3.18.11-patch/net/ipv4/ip_output.c
+--- linux-3.18.11/net/ipv4/ip_output.c	2015-04-04 10:46:37.000000000 +0800
++++ linux-3.18.11-patch/net/ipv4/ip_output.c	2015-04-16 16:22:32.000000000 +0800
+@@ -80,6 +80,7 @@
+ #include <linux/netlink.h>
+ #include <linux/tcp.h>
+ 
++
+ int sysctl_ip_default_ttl __read_mostly = IPDEFTTL;
+ EXPORT_SYMBOL(sysctl_ip_default_ttl);
+ 
+diff -uNr linux-3.18.11/net/ipv4/sysctl_net_ipv4.c linux-3.18.11-patch/net/ipv4/sysctl_net_ipv4.c
+--- linux-3.18.11/net/ipv4/sysctl_net_ipv4.c	2015-04-04 10:46:37.000000000 +0800
++++ linux-3.18.11-patch/net/ipv4/sysctl_net_ipv4.c	2015-04-16 13:47:35.000000000 +0800
+@@ -372,6 +372,27 @@
+ 		.mode		= 0644,
+ 		.proc_handler	= proc_dointvec_jiffies,
+ 	},
++	{
++		.procname	= "tcp_rto_min",
++		.data		= &sysctl_tcp_rto_min,
++		.maxlen		= sizeof(int),
++		.mode		= 0644,
++		.proc_handler	= &proc_dointvec
++	},
++	{
++		.procname	= "tcp_delack_min",
++		.data		= &sysctl_tcp_delack_min,
++		.maxlen		= sizeof(int),
++		.mode		= 0644,
++		.proc_handler	= &proc_dointvec
++	},
++	{
++		.procname	= "tcp_delayed_ack",
++		.data		= &sysctl_tcp_delayed_ack,
++		.maxlen		= sizeof(int),
++		.mode		= 0644,
++		.proc_handler	= &proc_dointvec
++	},
+ #ifdef CONFIG_SYN_COOKIES
+ 	{
+ 		.procname	= "tcp_syncookies",
+diff -uNr linux-3.18.11/net/ipv4/tcp_input.c linux-3.18.11-patch/net/ipv4/tcp_input.c
+--- linux-3.18.11/net/ipv4/tcp_input.c	2015-04-04 10:46:37.000000000 +0800
++++ linux-3.18.11-patch/net/ipv4/tcp_input.c	2015-04-16 13:55:13.000000000 +0800
+@@ -95,6 +95,11 @@
+ int sysctl_tcp_max_orphans __read_mostly = NR_FILE;
+ int sysctl_tcp_frto __read_mostly = 2;
+ 
++/* Added by Wei */
++int sysctl_tcp_rto_min __read_mostly = TCP_RTO_MIN;
++EXPORT_SYMBOL(sysctl_tcp_rto_min);
++int sysctl_tcp_delayed_ack __read_mostly = 1;
++
+ int sysctl_tcp_thin_dupack __read_mostly;
+ 
+ int sysctl_tcp_moderate_rcvbuf __read_mostly = 1;
+@@ -4812,6 +4817,8 @@
+ 	     __tcp_select_window(sk) >= tp->rcv_wnd) ||
+ 	    /* We ACK each frame or... */
+ 	    tcp_in_quickack_mode(sk) ||
++	    /* Delayed ACK is disabled or ... */
++	    sysctl_tcp_delayed_ack == 0 ||
+ 	    /* We have out of order data. */
+ 	    (ofo_possible && skb_peek(&tp->out_of_order_queue))) {
+ 		/* Then ack it now */
+diff -uNr linux-3.18.11/net/ipv4/tcp_output.c linux-3.18.11-patch/net/ipv4/tcp_output.c
+--- linux-3.18.11/net/ipv4/tcp_output.c	2015-04-04 10:46:37.000000000 +0800
++++ linux-3.18.11-patch/net/ipv4/tcp_output.c	2015-04-16 16:25:30.000000000 +0800
+@@ -41,6 +41,8 @@
+ #include <linux/compiler.h>
+ #include <linux/gfp.h>
+ #include <linux/module.h>
++#include <linux/ktime.h>
++#include <linux/timekeeping.h>
+ 
+ /* People can turn this off for buggy TCP's found in printers etc. */
+ int sysctl_tcp_retrans_collapse __read_mostly = 1;
+@@ -62,6 +64,9 @@
+ int sysctl_tcp_mtu_probing __read_mostly = 0;
+ int sysctl_tcp_base_mss __read_mostly = TCP_BASE_MSS;
+ 
++int sysctl_tcp_delack_min __read_mostly = TCP_DELACK_MIN;
++EXPORT_SYMBOL(sysctl_tcp_delack_min);
++
+ /* By default, RFC2861 behavior.  */
+ int sysctl_tcp_slow_start_after_idle __read_mostly = 1;
+ 
+@@ -933,7 +938,7 @@
+ 	 * One way to get this would be to set skb->truesize = 2 on them.
+ 	 */
+ 	skb->ooo_okay = sk_wmem_alloc_get(sk) < SKB_TRUESIZE(1);
+-
++	
+ 	skb_push(skb, tcp_header_size);
+ 	skb_reset_transport_header(skb);
+ 
+@@ -1003,7 +1008,10 @@
+ 	skb_shinfo(skb)->gso_segs = tcp_skb_pcount(skb);
+ 
+ 	/* Our usage of tstamp should remain private */
+-	skb->tstamp.tv64 = 0;
++	//skb->tstamp.tv64 = 0;
++
++	/* Set skb timestamp */
++        skb->tstamp=ktime_get();
+ 
+ 	/* Cleanup our debris for IP stacks */
+ 	memset(skb->cb, 0, max(sizeof(struct inet_skb_parm),
+@@ -3129,7 +3137,8 @@
+ 
+ 	tcp_ca_event(sk, CA_EVENT_DELAYED_ACK);
+ 
+-	if (ato > TCP_DELACK_MIN) {
++	//if (ato > TCP_DELACK_MIN) {
++	if (ato > sysctl_tcp_delack_min) {
+ 		const struct tcp_sock *tp = tcp_sk(sk);
+ 		int max_ato = HZ / 2;
+ 
+@@ -3145,7 +3154,8 @@
+ 		 */
+ 		if (tp->srtt_us) {
+ 			int rtt = max_t(int, usecs_to_jiffies(tp->srtt_us >> 3),
+-					TCP_DELACK_MIN);
++					sysctl_tcp_delack_min);
++					//TCP_DELACK_MIN);
+ 
+ 			if (rtt < max_ato)
+ 				max_ato = rtt;
diff -uNr linux-3.18.11-raw/net/dccp/timer.c linux-3.18.11/net/dccp/timer.c
--- linux-3.18.11-raw/net/dccp/timer.c	2015-04-04 10:46:37.000000000 +0800
+++ linux-3.18.11/net/dccp/timer.c	2015-06-24 02:21:32.000000000 +0800
@@ -203,7 +203,7 @@
 		icsk->icsk_ack.blocked = 1;
 		NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_DELAYEDACKLOCKED);
 		sk_reset_timer(sk, &icsk->icsk_delack_timer,
-			       jiffies + TCP_DELACK_MIN);
+			       jiffies + sysctl_tcp_delack_min);//TCP_DELACK_MIN);
 		goto out;
 	}
 
diff -uNr linux-3.18.11-raw/net/ipv4/ip_output.c linux-3.18.11/net/ipv4/ip_output.c
--- linux-3.18.11-raw/net/ipv4/ip_output.c	2015-04-04 10:46:37.000000000 +0800
+++ linux-3.18.11/net/ipv4/ip_output.c	2015-06-24 02:21:32.000000000 +0800
@@ -80,6 +80,7 @@
 #include <linux/netlink.h>
 #include <linux/tcp.h>
 
+
 int sysctl_ip_default_ttl __read_mostly = IPDEFTTL;
 EXPORT_SYMBOL(sysctl_ip_default_ttl);
 
diff -uNr linux-3.18.11-raw/net/ipv4/sysctl_net_ipv4.c linux-3.18.11/net/ipv4/sysctl_net_ipv4.c
--- linux-3.18.11-raw/net/ipv4/sysctl_net_ipv4.c	2015-04-04 10:46:37.000000000 +0800
+++ linux-3.18.11/net/ipv4/sysctl_net_ipv4.c	2015-06-24 02:21:32.000000000 +0800
@@ -372,6 +372,27 @@
 		.mode		= 0644,
 		.proc_handler	= proc_dointvec_jiffies,
 	},
+	{
+		.procname	= "tcp_rto_min",
+		.data		= &sysctl_tcp_rto_min,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec
+	},
+	{
+		.procname	= "tcp_delack_min",
+		.data		= &sysctl_tcp_delack_min,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec
+	},
+	{
+		.procname	= "tcp_delayed_ack",
+		.data		= &sysctl_tcp_delayed_ack,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec
+	},
 #ifdef CONFIG_SYN_COOKIES
 	{
 		.procname	= "tcp_syncookies",
diff -uNr linux-3.18.11-raw/net/ipv4/tcp_input.c linux-3.18.11/net/ipv4/tcp_input.c
--- linux-3.18.11-raw/net/ipv4/tcp_input.c	2015-04-04 10:46:37.000000000 +0800
+++ linux-3.18.11/net/ipv4/tcp_input.c	2015-06-24 02:21:32.000000000 +0800
@@ -95,6 +95,11 @@
 int sysctl_tcp_max_orphans __read_mostly = NR_FILE;
 int sysctl_tcp_frto __read_mostly = 2;
 
+/* Added by Wei */
+int sysctl_tcp_rto_min __read_mostly = TCP_RTO_MIN;
+EXPORT_SYMBOL(sysctl_tcp_rto_min);
+int sysctl_tcp_delayed_ack __read_mostly = 1;
+
 int sysctl_tcp_thin_dupack __read_mostly;
 
 int sysctl_tcp_moderate_rcvbuf __read_mostly = 1;
@@ -4812,6 +4817,8 @@
 	     __tcp_select_window(sk) >= tp->rcv_wnd) ||
 	    /* We ACK each frame or... */
 	    tcp_in_quickack_mode(sk) ||
+	    /* Delayed ACK is disabled or ... */
+	    sysctl_tcp_delayed_ack == 0 ||
 	    /* We have out of order data. */
 	    (ofo_possible && skb_peek(&tp->out_of_order_queue))) {
 		/* Then ack it now */
diff -uNr linux-3.18.11-raw/net/ipv4/tcp_output.c linux-3.18.11/net/ipv4/tcp_output.c
--- linux-3.18.11-raw/net/ipv4/tcp_output.c	2015-04-04 10:46:37.000000000 +0800
+++ linux-3.18.11/net/ipv4/tcp_output.c	2015-06-24 02:23:05.000000000 +0800
@@ -41,6 +41,8 @@
 #include <linux/compiler.h>
 #include <linux/gfp.h>
 #include <linux/module.h>
+#include <linux/ktime.h>
+#include <linux/timekeeping.h>
 
 /* People can turn this off for buggy TCP's found in printers etc. */
 int sysctl_tcp_retrans_collapse __read_mostly = 1;
@@ -62,6 +64,9 @@
 int sysctl_tcp_mtu_probing __read_mostly = 0;
 int sysctl_tcp_base_mss __read_mostly = TCP_BASE_MSS;
 
+int sysctl_tcp_delack_min __read_mostly = TCP_DELACK_MIN;
+EXPORT_SYMBOL(sysctl_tcp_delack_min);
+
 /* By default, RFC2861 behavior.  */
 int sysctl_tcp_slow_start_after_idle __read_mostly = 1;
 
@@ -933,7 +938,7 @@
 	 * One way to get this would be to set skb->truesize = 2 on them.
 	 */
 	skb->ooo_okay = sk_wmem_alloc_get(sk) < SKB_TRUESIZE(1);
-
+	
 	skb_push(skb, tcp_header_size);
 	skb_reset_transport_header(skb);
 
@@ -1003,7 +1008,10 @@
 	skb_shinfo(skb)->gso_segs = tcp_skb_pcount(skb);
 
 	/* Our usage of tstamp should remain private */
-	skb->tstamp.tv64 = 0;
+	//skb->tstamp.tv64 = 0;
+
+	/* Set skb timestamp */
+        skb->tstamp=ktime_get_real();
 
 	/* Cleanup our debris for IP stacks */
 	memset(skb->cb, 0, max(sizeof(struct inet_skb_parm),
@@ -3129,7 +3137,8 @@
 
 	tcp_ca_event(sk, CA_EVENT_DELAYED_ACK);
 
-	if (ato > TCP_DELACK_MIN) {
+	//if (ato > TCP_DELACK_MIN) {
+	if (ato > sysctl_tcp_delack_min) {
 		const struct tcp_sock *tp = tcp_sk(sk);
 		int max_ato = HZ / 2;
 
@@ -3145,7 +3154,8 @@
 		 */
 		if (tp->srtt_us) {
 			int rtt = max_t(int, usecs_to_jiffies(tp->srtt_us >> 3),
-					TCP_DELACK_MIN);
+					sysctl_tcp_delack_min);
+					//TCP_DELACK_MIN);
 
 			if (rtt < max_ato)
 				max_ato = rtt;
